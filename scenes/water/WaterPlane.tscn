[gd_scene load_steps=11 format=3 uid="uid://dwwgoodo0f43m"]

[sub_resource type="QuadMesh" id="QuadMesh_p1x3s"]
size = Vector2(60, 60)
subdivide_width = 400
subdivide_depth = 400
orientation = 1

[sub_resource type="Shader" id="Shader_jdekj"]
code = "shader_type spatial;

uniform vec3 albedo : source_color;
uniform vec3 albedo2 : source_color;
uniform float metallic : hint_range(0.0, 1.0) = 0;
uniform float roughness : hint_range(0.0, 1.0) = 0.02;
uniform sampler2D wave;
uniform sampler2D texture_normal;
uniform sampler2D texture_normal2;
uniform vec2 wave_direction = vec2(2.0,0.0); // Direction of wave 1
uniform vec2 wave_direction2 = vec2(0.0,1.0); // Direction of wave 2
uniform float time_scale : hint_range(0.0, 0.2, 0.005) = 0.025; // Rate of movement multiplied by TIME
uniform float noise_scale = 10.0;
uniform float height_scale = 0.15;

uniform sampler2D DEPTH_TEXTURE : hint_depth_texture, source_color;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, source_color;

uniform vec4 color_deep : source_color; // Deep depth color
uniform vec4 color_shallow : source_color; // Shallow depth color
uniform float beers_law = 2.0; // Beer's law application
uniform float depth_offset = -0.75; // Offset

uniform float edge_scale = 0.1;
uniform float near = 1.0;
uniform float far = 100.0;
uniform vec3 edge_color : source_color;

// Varying variables
varying float height;
varying vec3 world_pos;

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}
float edge(float depth){
	depth = 2.0 * depth - 1.0;
	return near * far / (far + depth * (near - far));
}

void vertex() {
	world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	height = texture(wave, world_pos.xz / noise_scale + TIME * time_scale).r;
	VERTEX.y += height * height_scale;
}

void fragment() {
	// Depth variables and calc
	float depth_texture = texture(DEPTH_TEXTURE, SCREEN_UV).r * 2.0 - 1.0;
	float depth = PROJECTION_MATRIX[3][2] / (depth_texture + PROJECTION_MATRIX[2][2]);
	float depth_blend = exp((depth+VERTEX.z + depth_offset) * -beers_law);
	depth_blend = clamp(1.0 - depth_blend, 0.0, 1.0);	
	float depth_blend_power = clamp(pow(depth_blend, 2.5), 0.0, 1.0);

	// Retrieving depth color and applying the deep and shallow colors
	vec3 screen_color = textureLod(SCREEN_TEXTURE, SCREEN_UV, depth_blend_power * 2.5).rgb;
	vec3 depth_color = mix(color_shallow.rgb, color_deep.rgb, depth_blend_power);
	vec3 color = mix(screen_color * depth_color, depth_color * 0.25, depth_blend_power * 0.5);
	
	// Getting edge depth calc
	float z_depth = edge(texture(DEPTH_TEXTURE, SCREEN_UV).x);
	float z_pos = edge(FRAGCOORD.z);
	float z_dif = z_depth - z_pos;
	
	// Time calculations for wave (normal map) movement
	vec2 time = (TIME * wave_direction) * time_scale; // Movement rate of first wave
	vec2 time2 = (TIME * wave_direction2) * time_scale; // Movement rate of second wave
	
	// Blend normal maps into one
	vec3 normal_blend = mix(texture(texture_normal,world_pos.xz + time).rgb, texture(texture_normal2,world_pos.xz + time2).rgb, 0.5);
	
	// Calculate Fresnel
	float fresnel = fresnel(5.0, NORMAL, VIEW);
	vec3 surface_color = mix(albedo, albedo2, fresnel); // Interpolate albedo values by frensel
	
	vec3 depth_color_adj = mix(edge_color, color, step(edge_scale, z_dif));
	
	//ALBEDO = depth_color_adj;//vec3(abs(depth_blend_power));
	ALBEDO = clamp(surface_color + color,vec3(0.0),vec3(1.0));
	METALLIC = metallic;
	ROUGHNESS = roughness;
	NORMAL_MAP = normal_blend;
}"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_2wmy4"]
fractal_type = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_idg2t"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_2wmy4")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_4j6hs"]
offset = Vector3(83.33, 0, 0)
fractal_type = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_as23r"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_4j6hs")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_hiq5w"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_oh3co"]
seamless = true
noise = SubResource("FastNoiseLite_hiq5w")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_r6tij"]
render_priority = 0
shader = SubResource("Shader_jdekj")
shader_parameter/albedo = Color(2.23327e-05, 0.651489, 0.993425, 1)
shader_parameter/albedo2 = Color(0, 0.21123, 0.464614, 1)
shader_parameter/metallic = 0.861
shader_parameter/roughness = 0.02
shader_parameter/wave_direction = Vector2(2, 0)
shader_parameter/wave_direction2 = Vector2(0, 1)
shader_parameter/time_scale = 0.025
shader_parameter/noise_scale = 10.0
shader_parameter/height_scale = 0.15
shader_parameter/color_deep = Color(0, 0, 0, 1)
shader_parameter/color_shallow = Color(0.0969626, 0.326008, 0.452273, 1)
shader_parameter/beers_law = 2.0
shader_parameter/depth_offset = 1.27
shader_parameter/edge_scale = 0.1
shader_parameter/near = 1.0
shader_parameter/far = 100.0
shader_parameter/edge_color = Color(0, 0, 0, 1)
shader_parameter/wave = SubResource("NoiseTexture2D_oh3co")
shader_parameter/texture_normal = SubResource("NoiseTexture2D_idg2t")
shader_parameter/texture_normal2 = SubResource("NoiseTexture2D_as23r")

[sub_resource type="CylinderMesh" id="CylinderMesh_g64ar"]
height = 43.786

[node name="Water" type="MeshInstance3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.06267, 0)
cast_shadow = 0
mesh = SubResource("QuadMesh_p1x3s")
surface_material_override/0 = SubResource("ShaderMaterial_r6tij")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -20.7137, 0)
visible = false
mesh = SubResource("CylinderMesh_g64ar")
